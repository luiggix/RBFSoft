
#ifndef __INCLUDE_IDENTITYPREC_H__
#define __INCLUDE_IDENTITYPREC_H__

using namespace std;

namespace flens {

// IdentityPrec declaration.
template <typename MA> class IdentityPrec;

template <typename MA>
struct TypeInfo<IdentityPrec<MA> >
{
    typedef IdentityPrec<MA>  Impl;
    typedef double    ElementType;
};

/*! 
 ***************************************************************************
 *  Identity Preconditioner.
 *  \author  Luis M. de la Cruz [ Wed Nov 28 10:06:43 GMT 2007 ]
 ***************************************************************************
 */  
template <typename MA>
class IdentityPrec : public SymmetricMatrix<IdentityPrec<MA> >
{
public:
    IdentityPrec(const MA &_A)  { }
};
/*! 
 ***************************************************************************
 *  Multiplication definition for the Identity preconditioner.
 *  Here the multiplaction \c alpha * \c J * \c b + \c beta * \c x is defined.
 *  In this case \c alpha = 1 and \c beta = 0, so we do \c x = \c J * \c b, but
 *  because this operation is intended for the Identity preconditioner, we
 *  finally do \c x = \c b.
 *  \param alpha scalar.
 *  \param J Identity preconditioner.
 *  \param b vector.
 *  \param beta scalar.
 *  \param x vector where the result is stored.
 *  \author  Luis M. de la Cruz [ Wed Nov 28 10:06:43 GMT 2007 ]
 ***************************************************************************
 */  
template<class Mat>
void
mv(double alpha, 
   const IdentityPrec<Mat> &J, 
   const DenseVector<Array<double> > &b,
   double beta, 
   DenseVector<Array<double> > &x)
{
    assert(alpha==1.);
    assert(beta==0.);
    x = b;
}

} // Namespace FLENS

#endif
